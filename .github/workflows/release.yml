name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  list-plugins:
    name: List Plugins
    runs-on: ubuntu-latest
    outputs:
      plugins: ${{ steps.list.outputs.plugins }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: List Plugins
        id: list
        run: |
          PLUGINS=$(find action-plugins endpoint-plugins -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=plugins::$PLUGINS"

  build-and-release:
    name: Build and Release Plugins
    needs: list-plugins
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plugin-type: [action-plugins, endpoint-plugins]
        plugin-name: ${{ fromJson(needs.list-plugins.outputs.plugins) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.23'

      - name: Read Plugin Version
        id: read_version
        working-directory: ${{ matrix.plugin-type }}/${{ matrix.plugin-name }}
        run: |
          VERSION=$(cat .version)
          echo "::set-output name=version::$VERSION"

      - name: Build Plugin
        working-directory: ${{ matrix.plugin-type }}/${{ matrix.plugin-name }}
        run: go build -o ${{ matrix.plugin-name }}-${{ steps.read_version.outputs.version }}

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          name: Release ${{ github.ref_name }} - ${{ matrix.plugin-name }} v${{ steps.read_version.outputs.version }}
          tag: ${{ github.ref_name }}
          artifacts: ${{ matrix.plugin-type }}/${{ matrix.plugin-name }}/${{ matrix.plugin-name }}-${{ steps.read_version.outputs.version }}
          skipIfReleaseExists: true
          generateReleaseNotes: true
          token: ${{ secrets.ACCESS_TOKEN }}
