name: Build and Release

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '.github/**'

jobs:
  list-plugins:
    name: List Plugins
    runs-on: ubuntu-latest
    outputs:
      action-plugins: ${{ steps.list-action.outputs.plugins }}
      endpoint-plugins: ${{ steps.list-endpoint.outputs.plugins }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List Action Plugins
        id: list-action
        run: |
          PLUGINS=$(find action-plugins -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          if [ -z "$PLUGINS" ]; then
            echo "plugins=[]" >> $GITHUB_OUTPUT
          else
            echo "plugins=$PLUGINS" >> $GITHUB_OUTPUT
          fi

      - name: List Endpoint Plugins
        id: list-endpoint
        run: |
          PLUGINS=$(find endpoint-plugins -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          if [ -z "$PLUGINS" ]; then
            echo "plugins=[]" >> $GITHUB_OUTPUT
          else
            echo "plugins=$PLUGINS" >> $GITHUB_OUTPUT
          fi

      - name: Debug Plugins
        run: |
          echo "Action Plugins: ${{ steps.list-action.outputs.plugins }}"
          echo "Endpoint Plugins: ${{ steps.list-endpoint.outputs.plugins }}"

  build-and-release-action-plugins:
    name: Build and Release Action Plugins
    needs: list-plugins
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plugin-name: ${{ fromJson(needs.list-plugins.outputs.action-plugins) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read Plugin Version
        id: read_version
        working-directory: action-plugins/${{ matrix.plugin-name }}
        run: |
          VERSION=$(cat .version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if Tag or Release Exists
        id: check-tag-release
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          TAG_EXISTS=$(git ls-remote --tags origin | grep "refs/tags/${{ matrix.plugin-name }}-v${{ steps.read_version.outputs.version }}" || true)
          RELEASE_EXISTS=$(gh release list --repo ${{ github.repository }} | grep "Release ${{ matrix.plugin-name }} v${{ steps.read_version.outputs.version }}" || true)
          if [ -n "$TAG_EXISTS" ] || [ -n "$RELEASE_EXISTS" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.24'

      - name: Build Plugin
        if: steps.check-tag-release.outputs.skip == 'false'
        working-directory: action-plugins/${{ matrix.plugin-name }}
        run: |
          GOOS=darwin GOARCH=amd64 go build -o ${{ matrix.plugin-name }}-v${{ steps.read_version.outputs.version }}-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -o ${{ matrix.plugin-name }}-v${{ steps.read_version.outputs.version }}-darwin-arm64
          GOOS=linux GOARCH=amd64 go build -o ${{ matrix.plugin-name }}-v${{ steps.read_version.outputs.version }}-linux-amd64

      - name: Create Tag
        if: steps.check-tag-release.outputs.skip == 'false'
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.ACCESS_TOKEN }}
          custom_tag: ${{ matrix.plugin-name }}-v${{ steps.read_version.outputs.version }}
          tag_prefix: ''

      - name: Create Release
        if: steps.check-tag-release.outputs.skip == 'false'
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          name: Release ${{ matrix.plugin-name }} v${{ steps.read_version.outputs.version }}
          tag: ${{ steps.tag_version.outputs.new_tag }}
          artifacts: action-plugins/${{ matrix.plugin-name }}/${{ matrix.plugin-name }}-v${{ steps.read_version.outputs.version }}-*
          skipIfReleaseExists: true
          generateReleaseNotes: true
          token: ${{ secrets.ACCESS_TOKEN }}

  build-and-release-endpoint-plugins:
    name: Build and Release Endpoint Plugins
    needs: list-plugins
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plugin-name: ${{ fromJson(needs.list-plugins.outputs.endpoint-plugins) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read Plugin Version
        id: read_version
        working-directory: endpoint-plugins/${{ matrix.plugin-name }}
        run: |
          VERSION=$(cat .version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if Tag or Release Exists
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        id: check-tag-release
        run: |
          TAG_EXISTS=$(git ls-remote --tags origin | grep "refs/tags/${{ matrix.plugin-name }}-v${{ steps.read_version.outputs.version }}" || true)
          RELEASE_EXISTS=$(gh release list --repo ${{ github.repository }} | grep "Release ${{ matrix.plugin-name }} v${{ steps.read_version.outputs.version }}" || true)
          if [ -n "$TAG_EXISTS" ] || [ -n "$RELEASE_EXISTS" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.24'

      - name: Build Plugin
        if: steps.check-tag-release.outputs.skip == 'false'
        working-directory: endpoint-plugins/${{ matrix.plugin-name }}
        run: |
          GOOS=darwin GOARCH=amd64 go build -o ${{ matrix.plugin-name }}-v${{ steps.read_version.outputs.version }}-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -o ${{ matrix.plugin-name }}-v${{ steps.read_version.outputs.version }}-darwin-arm64
          GOOS=linux GOARCH=amd64 go build -o ${{ matrix.plugin-name }}-v${{ steps.read_version.outputs.version }}-linux-amd64

      - name: Create Tag
        if: steps.check-tag-release.outputs.skip == 'false'
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.ACCESS_TOKEN }}
          custom_tag: ${{ matrix.plugin-name }}-v${{ steps.read_version.outputs.version }}
          tag_prefix: ''

      - name: Create Release
        if: steps.check-tag-release.outputs.skip == 'false'
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          name: Release ${{ matrix.plugin-name }} v${{ steps.read_version.outputs.version }}
          tag: ${{ steps.tag_version.outputs.new_tag }}
          artifacts: endpoint-plugins/${{ matrix.plugin-name }}/${{ matrix.plugin-name }}-v${{ steps.read_version.outputs.version }}-*
          skipIfReleaseExists: true
          generateReleaseNotes: true
          token: ${{ secrets.ACCESS_TOKEN }}