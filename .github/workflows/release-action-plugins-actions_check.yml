name: Release action-plugins - actions_check

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "action-plugins/actions_check/**"

jobs:
  build-and-release:
    name: Build and Release actions_check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read Plugin Version
        id: read_version
        working-directory: action-plugins/actions_check
        run: |
          VERSION=$(cat .version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if Tag or Release Exists
        id: check-tag-release
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          TAG_EXISTS=$(git ls-remote --tags origin | grep "refs/tags/actions_check-v${{ steps.read_version.outputs.version }}" || true)
          RELEASE_EXISTS=$(gh release list --repo ${{ github.repository }} | grep "Release actions_check v${{ steps.read_version.outputs.version }}" || true)
          if [ -n "$TAG_EXISTS" ] || [ -n "$RELEASE_EXISTS" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.24'

      - name: Build Plugin
        if: steps.check-tag-release.outputs.skip == 'false'
        working-directory: action-plugins/actions_check
        run: |
          GOOS=darwin GOARCH=amd64 go build -o actions_check-v${{ steps.read_version.outputs.version }}-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -o actions_check-v${{ steps.read_version.outputs.version }}-darwin-arm64
          GOOS=linux GOARCH=amd64 go build -o actions_check-v${{ steps.read_version.outputs.version }}-linux-amd64
          GOOS=darwin GOARCH=amd64 go build -o actions_check-latest-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -o actions_check-latest-darwin-arm64
          GOOS=linux GOARCH=amd64 go build -o actions_check-latest-linux-amd64

      - name: Create Tag
        if: steps.check-tag-release.outputs.skip == 'false'
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.ACCESS_TOKEN }}
          custom_tag: actions_check-v${{ steps.read_version.outputs.version }}
          tag_prefix: ''
      
      - name: Update -latest Tag
        if: steps.check-tag-release.outputs.skip == 'false'
        run: |
          set -e
          # Delete local and remote -latest tag if it exists
          git tag -d actions_check-latest 2>/dev/null || true
          git push origin :refs/tags/actions_check-latest 2>/dev/null || true
          # Create new -latest tag at current commit
          git tag actions_check-latest
          git push origin actions_check-latest --force

      - name: Create Version Release
        if: steps.check-tag-release.outputs.skip == 'false'
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          name: Release actions_check v${{ steps.read_version.outputs.version }}
          tag: ${{ steps.tag_version.outputs.new_tag }}
          artifacts: action-plugins/actions_check/actions_check-v${{ steps.read_version.outputs.version }}-*
          skipIfReleaseExists: true
          generateReleaseNotes: true
          token: ${{ secrets.ACCESS_TOKEN }}
      
      - name: Create Latest Release
        if: steps.check-tag-release.outputs.skip == 'false'
        id: create_latest_release
        uses: ncipollo/release-action@v1
        with:
          name: Release actions_check latest
          tag: actions_check-latest
          artifacts: action-plugins/actions_check/actions_check-latest-*
          skipIfReleaseExists: false
          generateReleaseNotes: false
          token: ${{ secrets.ACCESS_TOKEN }}
